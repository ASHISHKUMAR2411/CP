// First with Bubble sort
#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;
void librarySort(int *index, int n)
{
    int lib_size, index_pos,
        *gaps,
        *library[2];
    bool target_lib, *numbered;
    for (int i = 0; i < 2; i++)
        library[i] = new int[n];
    gaps = new int[n + 1];
    numbered = new bool[n + 1];
    lib_size = 1;
    index_pos = 1;
    target_lib = 0;
    library[target_lib][0] = index[0];
    while (index_pos < n)
    {
        int insert = std::distance(
            library[target_lib],
            std::lower_bound(library[target_lib],
                             library[target_lib] + lib_size, index[index_pos]));
        if (numbered[insert] == true)
        {
            int prov_size = 0, next_target_lib = !target_lib;
            for (int i = 0; i <= n; i++)
            {
                if (numbered[i] == true)
                {
                    library[next_target_lib][prov_size] = gaps[i];
                    prov_size++;
                    numbered[i] = false;
                }
                if (i <= lib_size)
                {
                    library[next_target_lib][prov_size] =
                        library[target_lib][i];
                    prov_size++;
                }
            }
            target_lib = next_target_lib;
            lib_size = prov_size - 1;
        }
        else
        {
            numbered[insert] = true;
            gaps[insert] = index[index_pos];
            index_pos++;
        }
    }
    int index_pos_for_output = 0;
    for (int i = 0; index_pos_for_output < n; i++)
    {
        if (numbered[i] == true)
        {
            index[index_pos_for_output] = gaps[i];
            index_pos_for_output++;
        }
        if (i < lib_size)
        {
            index[index_pos_for_output] = library[target_lib][i];
            index_pos_for_output++;
        }
    }
}
// Driver code
int main()
{
    srand(time(0));
    auto start = high_resolution_clock::now();
    int arr[] = {24632, 25017, 16573, 11083, 32319, 4412, 10667, 19802, 14279, 25280, 8967, 24268, 13602, 22242, 32331, 12609, 28475, 31084, 29800, 17658, 9248, 5067, 24166, 12015, 29885, 25540, 24906, 9499, 4074, 10850, 4412, 9499, 3753, 10035, 20457, 26871, 26024, 21428, 27175, 7744, 4110, 29449, 14551, 4955, 22388, 18929, 18704, 20252, 23856, 4858, 20346, 18071, 18650, 753, 27383, 9522, 16393, 29085, 31369, 23295, 2910, 31405, 2672, 25929, 3268, 10990, 7314, 1389, 27381, 3521, 20512, 23019, 5697, 11981, 11383, 3517, 2699, 25585, 4932, 4584, 29332, 29564, 7660, 5456, 4220, 27297, 27179, 11984, 3973, 14373, 6651, 28042, 8987, 24411, 2743, 17276, 5905, 22354, 1920, 32341, 13614, 27213, 31456, 17030, 9192, 10611, 25517, 15515, 8815, 18632, 4400, 31948, 17901, 30556, 27271, 12495, 7180, 1987, 17736, 12273, 22202, 31940, 3943, 3429, 25897, 20053, 20570, 9436, 7705, 31432, 17786, 21846, 24409, 14399, 7597, 24119, 18059, 23141, 6210, 4765, 26409, 16480, 2844, 22257, 8645, 24321, 5139, 7356, 149, 15166, 31127, 20668, 15662, 26851, 32406, 28472, 21392, 24964, 11680, 12944, 18019, 18358, 24394, 4120, 30848, 27263, 32720, 30502, 16307, 7434, 22526, 1642, 5311, 13983, 23888, 11134, 1187, 20179, 19800, 24766, 18204, 2556, 6240, 32090, 7787, 2536, 24401, 19370, 25688, 22223, 2259, 22977, 26743, 21637, 12726, 14404, 938, 6132, 31889, 7037, 1255, 12490, 1192, 4779, 23356, 15215, 30739, 18844, 8464, 20282, 7453, 2174, 27819, 7396, 18155, 26099, 2553, 20797, 32094, 24419, 394, 4125, 23609, 19350, 4318, 7070, 28039, 23426, 30688, 31624, 823, 7521, 16304, 14605, 21514, 13831, 24229, 695, 24495, 17523, 23955, 19614, 24108, 9124, 25161, 16606, 15999, 32430, 17246, 5192, 30853, 27404, 2350, 4952, 13852, 32056, 31, 31591, 6020, 2937, 16425, 29730, 5900, 4860, 19861, 15675, 20458, 29479, 14084, 25695, 11370, 29482, 21684, 5991, 16203, 17879, 3327, 26322, 19557, 32691, 16932, 3187, 17552, 13133, 19786, 2663, 14530, 10190, 10946, 13898, 2167, 24018, 15245, 1194, 20310, 22134, 16414, 10428, 22033, 20658, 28768, 23630, 2701, 28906, 21755, 25597, 17219, 1727, 17876, 9128, 20966, 25899, 12754, 22309, 10565, 205, 5096, 17202, 6772, 18561, 14672, 29358, 27942, 27700, 15636, 21513, 22366, 1527, 23763, 19193, 6215, 22865, 2754, 2670, 14943, 7386, 24817, 19145, 16603, 517, 22992, 12360, 17480, 28478, 29169, 30149, 17006, 8245, 5903, 12193, 9593, 8313, 2128, 15099, 18011, 21576, 3015, 11557, 28268, 934, 7485, 22360, 7251, 7084, 31281, 12966, 4138, 6691, 12061, 18481, 25309, 22353, 2555, 27035, 11475, 8723, 5640, 19901, 32721, 25132, 1224, 26012, 14363, 13533, 10314, 32152, 26844, 14262, 25261, 32487, 26567, 30123, 12003, 25922, 15359, 10858, 9909, 15582, 29748, 20460, 10759, 15518, 10255, 10826, 2910, 20615, 10449, 17875, 26015, 10356, 9527, 7003, 32538, 7947, 17568, 20181, 24006, 3311, 32113, 15397, 28878, 23607, 10937, 17967, 29517, 28704, 9489, 7220, 27734, 13566, 25287, 26974, 28728, 27769, 25403, 8857, 1792, 2549, 27016, 26277, 23615, 13138, 19047, 9321, 7181, 14806, 20817, 31627, 8525, 8039, 228, 2877, 22835, 31742, 12936, 9050, 4, 22360, 22866, 2993, 6941, 19183, 27689, 21921, 21559, 40, 15143, 27622, 6633, 24270, 13377, 21682, 10606, 32703, 23339, 23039, 26025, 14309, 30838, 3108, 8038, 20328, 17404, 21159, 13027, 14626, 3709, 32595, 7823, 24148, 11914, 6026, 30481, 21143, 13474, 18396, 23692, 1045, 10908, 13784, 21794, 15352, 25156, 9249, 12471, 803, 5961, 7365, 23031, 16160, 26711, 5579, 14490, 7002, 27520, 17419, 2278, 4749, 25056, 4163, 19574, 11386, 20097, 25190, 14395, 17375, 29820, 14135, 17344, 26790, 97, 13335, 15794, 12893, 24793, 11547, 2463, 5862, 4746, 20834, 27390, 6512, 25403, 29094, 368, 26022, 28729, 5392, 23109, 11045, 25593, 20561, 15170, 19764, 14078, 4846, 2721, 15023, 30717, 24283, 30810, 581, 24384, 7756, 19617, 30436, 12616, 3016, 32688, 30832, 13494, 24703, 32454, 13499, 16236, 15581, 17008, 29874, 7919, 32607, 6663, 18900, 24591, 32166, 20602, 12265, 14795, 21450, 3661, 30448, 8047, 15856, 7394, 2393, 15871, 12319, 28408, 25204, 26840, 8271, 4721, 18730, 14741, 14019, 28504, 8939, 26416, 22681, 30754, 29415, 6249, 16544, 12084, 22913, 13676, 6761, 9638, 10240, 31918, 21409, 22343, 23688, 24344, 6045, 2017, 6730, 26471, 10551, 1470, 29175, 12499, 3801, 30058, 3706, 12526, 17623, 2747, 6630, 22736, 27138, 21263, 28333, 20849, 6778, 29909, 26900, 22358, 27843, 2127, 27875, 31088, 17691, 28053, 29537, 16193, 29451, 17374, 13695, 31296, 19773, 26107, 18004, 18047, 16269, 4132, 12745, 32395, 32610, 4855, 29590, 9875, 23103, 14270, 23149, 4813, 21141, 14833, 11124, 19734, 32476, 31228, 6649, 32217, 24289, 19777, 26466, 23601, 7010, 3937, 16226, 26962, 25560, 22711, 9331, 31525, 24212, 32294, 128, 23090, 24333, 15893, 11745, 30403, 22137, 16055, 3213, 31046, 12954, 16784, 30603, 12788, 7899, 12341, 11946, 11184, 23451, 26195, 2162, 26162, 8137, 23794, 90, 31588, 14513, 6907, 30012, 13324, 23573, 3832, 11269, 20396, 24704, 13852, 27313, 934, 20439, 13443, 16247, 30116, 2097, 17082, 18496, 13623, 24296, 5250, 3678, 30911, 31217, 7377, 19067, 8586, 21352, 21274, 9423, 19264, 7023, 24014, 17815, 27262, 27705, 17955, 18882, 16065, 1122, 6420, 28653, 7046, 31618, 6569, 4497, 19631, 9473, 26744, 15483, 6697, 5421, 17516, 125, 11980, 31881, 18629, 17764, 26242, 19816, 19552, 15657, 18348, 24507, 17977, 18028, 11201, 1832, 23342, 21277, 23352, 20316, 30982, 10109, 8361, 21153, 8881, 1349, 5935, 24243, 20945, 5924, 14352, 23503, 4474, 12399, 27552, 10766, 13878, 13589, 8546, 26865, 22349, 15825, 13169, 23869, 27971, 19619, 6430, 26889, 14753, 9600, 11483, 18965, 23545, 8009, 2392, 4701, 14372, 250, 16875, 3822, 4558, 16164, 31285, 4345, 309, 11677, 8451, 19750, 9517, 31093, 21106, 17706, 13928, 32557, 9559, 28572, 24564, 20772, 26589, 4612, 261, 594, 3952, 310, 15349, 2360, 24538, 15326, 30345, 20247, 3500, 4955, 12150, 16225, 24544, 22225, 19747, 27501, 5308, 13433, 18865, 5742, 3578, 17724, 24633, 15782, 2085, 30337, 8020, 28887, 24902, 17987, 1249, 3835, 12992, 1382, 1794, 15156, 17017, 5195, 11880, 7686, 3898, 19874, 9681, 18116, 31833, 4991, 25294, 16712, 24725, 12976, 19402, 13287, 31809, 4175, 32584, 6565, 6821, 21907, 8300, 27812, 25249, 3563, 19645, 21731, 6803, 27470, 7977, 12069, 25467, 9420, 25674, 46, 12125, 9066, 25575, 10293, 30439, 28972, 25534, 27287, 29268, 7795, 18304, 7625, 22928, 4489, 29214, 6032, 28573, 29819, 19523, 10612, 23861, 13607, 5153, 16754, 7857, 19349, 23153, 753, 2345, 14987, 20661, 27639, 10973, 32347, 19649, 23197, 2771, 24064, 9593, 1728, 3010, 21097, 19676, 17402, 30255, 30741, 19266, 8144, 28118, 16096, 32737, 12333, 22091, 19485, 19094, 9744, 27361, 17124, 739, 30849, 3531, 26285, 24628, 15305, 4737, 19486, 14182, 30946, 1894, 3106};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << endl;
    cout << endl;
    librarySort(arr, n);
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
    cout << endl;
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);
    cout << duration.count() << endl;
    return 0;
}
// void CycleSort(int arr[], int n)
// {
//     for (int cycle_start = 0; cycle_start <= n - 2; cycle_start++)
//     {
//         int item = arr[cycle_start];
//         int pos = cycle_start;
//         for (int i = cycle_start + 1; i < n; i++)
//             if (arr[i] < item)
//                 pos++;
//         if (pos == cycle_start)
//             continue;
//         while (item == arr[pos])
//             pos += 1;
//         if (pos != cycle_start)
//             swap(item, arr[pos]);
//         while (pos != cycle_start)
//         {
//             pos = cycle_start;
//             for (int i = cycle_start + 1; i < n; i++)
//                 if (arr[i] < item)
//                     pos += 1;
//             while (item == arr[pos])
//                 pos += 1;
//             if (item != arr[pos])
//                 swap(item, arr[pos]);
//         }
//     }
// }

// void Heapify(int arr[], int size, int ithIndex)
// {
//     int largestIndex = ithIndex, leftChildIndex = 2 * ithIndex + 1, rightChildIndex = 2 * ithIndex + 2;
//     if (leftChildIndex < size && arr[largestIndex] < arr[leftChildIndex])
//     {
//         largestIndex = leftChildIndex;
//     }
//     if (rightChildIndex < size && arr[largestIndex] < arr[rightChildIndex])
//     {
//         largestIndex = rightChildIndex;
//     }
//     if (largestIndex != ithIndex)
//     {
//         swap(arr[ithIndex], arr[largestIndex]);
//         Heapify(arr, size, largestIndex);
//     }
// }
// void HeapSort(int arr[], int n)
// {
//     for (int i = n / 2 - 1; i >= 0; i--)
//     {
//         Heapify(arr, n, i);
//     }
//     for (int i = n - 1; i > 0; i--)
//     {
//         swap(arr[i], arr[0]);
//         Heapify(arr, i, 0);
//     }
// }

// void countSort(int arr[], int n)
// {
//     int max = arr[0], min = arr[0];
//     for (int i = 0; i < n; i++)
//     {
//         if (arr[i] > max)
//             max = arr[i];
//         if (arr[i] < min)
//             min = arr[i];
//     }
//     int range = max - min + 1;
//     int count[range], output[n];
//     for (int i = 0; i < range; i++)
//         count[i] = 0;
//     for (int i = 0; i < n; i++)
//         count[arr[i] - min]++;
//     for (int i = 1; i < range; i++)
//         count[i] += count[i - 1];
//     for (int i = n - 1; i >= 0; i--)
//     {
//         output[count[arr[i] - min] - 1] = arr[i];
//         count[arr[i] - min]--;
//     }
//     for (int i = 0; i < n; i++)
//         arr[i] = output[i];
// }

// void insertionSort(vector<int> &arr)
// {
//     int n = arr.size();
//     int i, key, j;
//     for (i = 1; i < n; i++)
//     {
//         key = arr[i];
//         j = i - 1;
//         while (j >= 0 && arr[j] > key)
//         {
//             arr[j + 1] = arr[j];
//             j = j - 1;
//         }
//         arr[j + 1] = key;
//     }
// }

// void BucketSort(int arr[], int n, int k)
// {
//     int max = arr[0];
//     for (int i = 0; i < n; i++)
//         if (arr[i] > max)
//             max = arr[i];
//     max++;
//     vector<int> B[k];
//     for (int i = 0; i < n; i++)
//     {
//         int j = (k * arr[i]) / max;
//         B[j].push_back(arr[i]);
//     }
//     for (int i = 0; i < k; i++)
//         insertionSort(B[i]);
//     int index = 0;
//     for (int i = 0; i < k; i++)
//         for (int j = 0; j < B[i].size(); j++)
//             arr[index++] = B[i][j];
// }

// void bubbleSort(int arr[], int n)
// {
//     int i, j;
//     for (i = 0; i < n - 1; i++)
//         for (j = 0; j < n - i - 1; j++)
//             if (arr[j] > arr[j + 1])
//                 swap(arr[j], arr[j + 1]);
// }

// void merging(int arr[], int low, int mid, int high)
// {
//     int size1 = mid - low + 1;
//     int size2 = high - mid;
//     int left[size1], right[size2];
//     for (int i = 0; i < size1; i++)
//     {
//         left[i] = arr[low + i];
//     }
//     for (int j = 0; j < size2; j++)
//     {
//         right[j] = arr[mid + 1 + j];
//     }
//     int i = 0, j = 0, k = low;
//     while (i < size1 && j < size2)
//     {
//         if (left[i] < right[j])
//         {
//             arr[k] = left[i];
//             i++;
//         }
//         else
//         {
//             arr[k] = right[j];
//             j++;
//         }
//         k++;
//     }
//     while (i < size1)
//     {
//         arr[k++] = left[i++];
//     }
//     while (j < size2)
//     {
//         arr[k++] = right[j++];
//     }
// }

// void mergeSort(int arr[], int low, int high)
// {
//     if (low >= high)
//     {
//         return;
//     }
//     int mid = low + (high - low) / 2;
//     mergeSort(arr, low, mid);
//     mergeSort(arr, mid + 1, high);
//     merging(arr, low, mid, high);
// }